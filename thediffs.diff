diff --git a/.gitignore b/.gitignore
index ccb5e72..a9088af 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,5 @@
+jnk
+
 .DS_Store
 devnotes.txt
 apikey.js
diff --git a/app.js b/app.js
old mode 100755
new mode 100644
index 3c59cd7..d4f6a3d
--- a/app.js
+++ b/app.js
@@ -1,3 +1,7 @@
+// Start/restart this with
+// pm2 start bin/www -i 3
+// pm2 restart all
+
 var createError = require('http-errors');
 var express = require('express');
 var path = require('path');
@@ -32,7 +36,7 @@ const MongoStore = require('connect-mongo')(session)
 
 const mongoose = require( 'mongoose' );
 
-mongoose.connect( 'mongodb://localhost/sga_v_1_0', { useNewUrlParser: true } );
+mongoose.connect( 'mongodb://localhost/pra_V2_0', { useNewUrlParser: true } );
 const db = mongoose.connection;
 db.on('error', console.error.bind(console, 'connection error:'));
 db.once('open', function() {
@@ -44,8 +48,7 @@ db.once('open', function() {
 var GoogleStrategy = require('passport-google-oauth').OAuth2Strategy;
 // here we set up authentication with passport
 const passport = require('passport')
-const configPassport = require('./config/passport');
-const Skill = require('./models/Skill');
+const configPassport = require('./config/passport')
 configPassport(passport)
 
 
@@ -75,14 +78,17 @@ app.use(session(
   {secret: 'zzbbyanana',
    resave: false,
    saveUninitialized: false,
+   cookie:{maxAge:24*60*60*1000}, // allow login for one day...
    store:new MongoStore({mongooseConnection: mongoose.connection})}))
 app.use(flash());
 app.use(passport.initialize());
 app.use(passport.session());
+app.use(bodyParser.json())
 app.use(bodyParser.urlencoded({ extended: false }));
 
 
 
+
 const approvedLogins = ["tjhickey724@gmail.com","csjbs2018@gmail.com"];
 
 // here is where we check on their logged in status
@@ -151,45 +157,82 @@ function isLoggedIn(req, res, next) {
 
 
 app.get('/',
+    isLoggedIn,
     async ( req, res, next ) => {
-     try{
 
-          if (!req.user) next()
 
-          let coursesOwned =
-              await Course.find({ownerId:req.user._id},'name')
-          res.locals.coursesOwned = coursesOwned
-          res.locals.coursesTAing = []
+      if (!req.user) next()
 
-          let registrations =
-              await  CourseMember.find({studentId:req.user._id},'courseId')
-          res.locals.registeredCourses = registrations.map((x)=>x.courseId)
 
-          let coursesTaken =
-              await Course.find({_id:{$in:res.locals.registeredCourses}},'name')
-          res.locals.coursesTaken = coursesTaken
 
-          res.locals.title = "PRA"
-          res.render('index');
-      } catch(e){
-      console.log('error in index page ')
-      console.dir(e)
-      next(e)
+      let coursesOwned =
+          await Course.find({ownerId:req.user._id},'name')
+      res.locals.coursesOwned = coursesOwned
+      res.locals.coursesTAing = []
+
+      let registrations =
+          await  CourseMember.find({studentId:req.user._id},'courseId')
+      res.locals.registeredCourses = registrations.map((x)=>x.courseId)
+
+      let coursesTaken =
+          await Course.find({_id:{$in:res.locals.registeredCourses}},'name')
+      res.locals.coursesTaken = coursesTaken
+
+      let coursesTAing =
+          await Course.find({_id:{$in:req.user.taFor}})
+      res.locals.coursesTAing = coursesTAing
+
+      res.locals.title = "PRA"
+      res.render('index');
     }
-  }
 
 )
 
+app.get('/stats',
+  async (req,res,next) => {
+    let courseCount =
+        await Course.find().count();
+    let userCount =
+        await User.find().count();
+    let problemCount =
+        await Problem.find().count();
+    let answerCount =
+        await Answer.find().count();
+    let reviewCount =
+        await Review.find().count();
+    let courses =
+        await Course.find({},{name:1})
+    res.render("stats.ejs",{courseCount,userCount,problemCount,answerCount,reviewCount,courses,googleemail:req.user.googleemail})
+})
+
 app.use(isLoggedIn)
 
+app.use((req,res,next) => {
+  if (true || req.user.googleemail.endsWith("@brandeis.edu")){
+    next()
+  } else {
+    res.send("You must have a Brandeis email to use this Peer Review App server\n "+
+             "You can set up your own server. The code is at http://github.com/tjhickey724/PeerReviewApp branch v2.1 ")
+  }
+})
+
 app.get('/createCourse',
       (req,res) => res.render('createCourse'))
 
 // rename this to /createCourse and update the ejs form
 app.post('/createNewCourse',
   async ( req, res, next ) => {
+    //console.dir(req.body)
+    if (false  && !req.user.googleemail.endsWith("@brandeis.edu")){
+      res.send("You must log in with an @brandeis.edu account to create a class. <a href='/logout'>Logout</a>")
+      return
+    } else if (!(req.body.norobot=='on' && req.body.robot==undefined)) {
+      res.send("no robots allowed!")
+      return
+    }
     try {
       let coursePin =  await getCoursePin()
+      //console.dir(req.user)
       let newCourse = new Course(
        {
         name: req.body.courseName,
@@ -239,36 +282,57 @@ app.get('/showCourse/:courseId',
 
       res.locals.problemSets = await ProblemSet.find({courseId:res.locals.courseInfo._id})
 
+      // next we create maps to find the number of problems and user's answers
+      // in each problem set so the user will know if they have finished a problemset
+      let problems = await Problem.find({courseId:res.locals.courseInfo._id})
+      let myAnswers = await Answer.find(
+           {courseId:res.locals.courseInfo._id,
+            studentId:req.user._id})
+
+
+      let problemMap = new Map()
+      let answerMap = new Map()
+      for (let problem of problems) {
+        let count = problemMap.get(problem.psetId.toString())
+        if (count) {
+          problemMap.set(problem.psetId.toString(),count+1)
+        } else {
+          problemMap.set(problem.psetId.toString(),1)
+        }
+      }
+      for (let answer of myAnswers) {
+        let count = answerMap.get(answer.psetId.toString())
+        if (count) {
+          answerMap.set(answer.psetId.toString(),count+1)
+        } else {
+          answerMap.set(answer.psetId.toString(),1)
+        }
+      }
+      res.locals.problemMap = problemMap
+      res.locals.answerMap = answerMap
+
+      let myReviews = await Review.find(
+        {courseId:res.locals.courseInfo._id,
+         studentId:req.user._id})
+      res.locals.myReviews = myReviews
+      let thumbsUp = 0
+      let thumbsDown=0
+      for (let r of myReviews) {
+        thumbsUp += r.upvoters.length
+        thumbsDown += r.downvoters.length
+      }
+      res.locals.thumbsUp = thumbsUp
+      res.locals.thumbsDown = thumbsDown
+
+
+
       res.locals.isTA =
           req.user.taFor &&
           req.user.taFor.includes(res.locals.courseInfo._id)
 
-      let answers = await Answer.find({studentId:req.user._id, courseId:id})
-      answers = answers.map((x) => x._id)
-      let taIds = (await User.find({taFor:id})).map((x)=> x._id)
-
-      let reviews =
-         await Review.find({answerId:{$in:answers},reviewerId:{$in:taIds}})
-      let skillLists = reviews.map((x)=>x.skills)
-      let skillIds= Array.from(new Set(skillLists.flat()))
-      res.locals.skills = await Skill.find({_id:{$in:skillIds}})
-      res.locals.allSkills = await Skill.find({courseId:id})
-      res.locals.skillIds = skillIds
-      res.render('showCourse')
-    }
-    catch(e){
-      next(e)
-    }
-  }
-)
 
 
-app.get('/showSkills/:courseId',
-  async (req, res, next) => {
-    try {
-      res.locals.skills = await Skill.find({courseId:req.params.courseId})
-      res.locals.courseId = req.params.courseId
-      res.render('showSkills')
+      res.render('showCourse')
     }
     catch(e){
       next(e)
@@ -339,8 +403,7 @@ app.post('/saveProblemSet/:courseId',
          {
           name: req.body.name,
           courseId:id,
-          createdAt: new Date(),
-          visible: req.body.visible=='visible',
+          createdAt: new Date()
          }
       )
 
@@ -361,47 +424,9 @@ app.post('/saveProblemSet/:courseId',
   }
 )
 
-app.post('/updateProblemSet/:psetId',
-  async ( req, res, next ) => {
-    try {
-      const id = req.params.psetId
-      const pset = await ProblemSet.findOne({_id:id})
-      console.log('id='+id)
-      pset.name=req.body.name
-      pset.visible = (req.body.visible=='visible')
-      pset.reviewable = (req.body.reviewable=='yes')
-      await pset.save()
-
-      res.redirect("/showProblemSet/"+id)
-
-    }
-    catch(e){
-      next(e)
-    }
-  }
-)
-
 app.get('/showProblemSet/:psetId',
   async ( req, res, next ) => {
-    const psetId = req.params.psetId
-    res.locals.psetId = psetId
-    console.log('psetId= '+psetId)
-    console.log('........')
-    res.locals.problemSet =
-        await ProblemSet.findOne({_id:psetId})
-    console.log('problemSet='+res.locals.problemSet)
-    res.locals.problems =
-        await Problem.find({psetId:psetId})
-    console.log('problemSet= '+res.locals.problemSet)
-    console.dir(res.locals.problemSet)
-    res.locals.courseInfo =
-        await Course.findOne({_id:res.locals.problemSet.courseId})
-    res.render('showProblemSet')
-  }
-)
-
-app.get('/editProblemSet/:psetId',
-  async ( req, res, next ) => {
+    console.log("in showProblemSet")
     const psetId = req.params.psetId
     res.locals.psetId = psetId
     res.locals.problemSet =
@@ -411,7 +436,14 @@ app.get('/editProblemSet/:psetId',
     res.locals.courseInfo =
         await Course.findOne({_id:res.locals.problemSet.courseId},
                               'ownerId')
-    res.render('editProblemSet')
+    res.locals.myAnswers =
+        await Answer.find({psetId:psetId,studentId:req.user._id})
+    res.locals.pids = res.locals.myAnswers.map((x)=>{
+      return x.problemId.toString()
+    console.log("pids = ")
+    console.dir(res.locals.pids)
+    })
+    res.render('showProblemSet')
   }
 )
 
@@ -440,10 +472,10 @@ app.get('/gradeProblemSet/:psetId',
     const taList =
        await User.find({taFor:res.locals.courseInfo._id})
     const taIds = taList.map(x => x._id)
-    console.log('taIds='+JSON.stringify(taIds))
+    //console.log('taIds='+JSON.stringify(taIds))
     const taReviews =
        await Review.find({psetId:psetId,reviewerId:{$in:taIds}})
-    console.log("found "+taReviews.length+" reviews by "+taList.length+" tas")
+    //console.log("found "+taReviews.length+" reviews by "+taList.length+" tas")
 
     res.locals.taReviews = taReviews
     //console.log(JSON.stringify(req.user._id))
@@ -456,62 +488,9 @@ app.get('/gradeProblemSet/:psetId',
   }
 )
 
-app.get('/gradeProblem/:probId/:studentId',
-async (req,res,next) => {
-  try{
-    const probId = req.params.probId
-    const studentId = req.params.studentId
-
-    let problem = await Problem.findOne({_id:probId})
-    res.locals.student = await User.findOne({_id:studentId})
-
-
-    let answer =
-        await Answer.findOne({problemId:probId,studentId:studentId})
-
-    //console.log("answer= "+JSON.stringify(answer))
-    // and we need to add it to the problem.pendingReviews
-    res.locals.answer = answer
-    res.locals.problem = problem
-
-    let myReviews = []
-    if (answer!=undefined){
-      myReviews =
-        await Review.find({problemId:problem._id,
-                           answerId:answer._id,
-                           reviewerId:req.user._id})
-    }
-    res.locals.numReviewsByMe = myReviews.length
-    res.locals.alreadyReviewed = (myReviews.length>0)
-
-
-    //console.log('\n\n\nmy reviews='+JSON.stringify(myReviews))
-    //console.log(res.locals.numReviewsByMe)
-    if (true || res.locals.alreadyReviewed){
-      res.redirect('/showReviewsOfAnswer/'+answer._id)
-    } else {
-      res.render("reviewAnswer")
-    }
-  }
-  catch(e){
-    next(e)
-  }
- }
-)
-
-
 app.get('/addProblem/:psetId',
-  async (req,res,next) => {
-    try {
-      const pset = await ProblemSet.findOne({_id:req.params.psetId})
-      res.locals.psetId = req.params.psetId
-      res.locals.skills = await Skill.find({courseId:pset.courseId})
-      res.render("addProblem")
-    }
-    catch(e){
-        next(e)
-    }
-  })
+      (req,res) => res.render("addProblem",{psetId:req.params.psetId})
+    )
 
 
 app.post('/saveProblem/:psetId',
@@ -520,15 +499,6 @@ app.post('/saveProblem/:psetId',
         const psetId = req.params.psetId
         res.locals.psetId = psetId
         res.locals.problemSet = await ProblemSet.findOne({_id:psetId})
-        let skills = req.body.skills
-        console.log("skills="+JSON.stringify(skills))
-        console.log("typeof(skills="+typeof(skills))
-        if (typeof(skills)=='undefined'){
-          skills = []
-        } else if (typeof(skills)=='string'){
-          skills = [skills]
-        }
-
         let newProblem = new Problem(
            {
             courseId: res.locals.problemSet.courseId,
@@ -537,8 +507,8 @@ app.post('/saveProblem/:psetId',
             problemText: req.body.problemText,
             points: req.body.points,
             rubric: req.body.rubric,
-            skills: skills,
             pendingReviews: [],
+            allowAnswers:true,
             createdAt: new Date()
            }
           )
@@ -552,7 +522,8 @@ app.post('/saveProblem/:psetId',
         res.locals.courseInfo =
             await Course.findOne({_id:res.locals.problemSet.courseId},
                                   'ownerId')
-        res.render("showProblemSet")
+        //res.render("showProblemSet")
+        res.redirect("/showProblemSet/"+psetId)
       }
     catch(e){
       next(e)
@@ -568,23 +539,11 @@ app.post('/updateProblem/:probId',
 
       problem.description= req.body.description
       problem.problemText= req.body.problemText
-      problem.visible = (req.body.visible=='visible')
-      problem.reviewable = (req.body.reviewable=='reviewable')
       problem.points= req.body.points
       problem.rubric= req.body.rubric
       problem.createdAt =  new Date()
 
-      let skills = req.body.skill
-      console.log("skills="+JSON.stringify(skills))
-      console.log("typeof(skills="+typeof(skills))
-      if (typeof(skills)=='undefined'){
-        skills = []
-      }else if (typeof(skills)=='string'){
-        skills = [skills]
-      }
-      problem.skills = skills
-
-      await problem.save()  // update would be safer, no race conditions
+      await problem.save()
 
       res.redirect("/showProblem/"+req.params.probId)
     }
@@ -594,7 +553,6 @@ app.post('/updateProblem/:probId',
   }
 )
 
-const ObjectId = mongoose.Schema.Types.ObjectId;
 
 app.get('/showProblem/:probId',
       async (req, res, next) => {
@@ -612,10 +570,6 @@ app.get('/showProblem/:probId',
               reviews.reduce((t,x)=>t+x.points,0)/reviews.length
           res.locals.answers = await Answer.find({problemId:probId,studentId:res.locals.user._id})
 
-          res.locals.skills =
-              await Skill.find({_id: {$in:res.locals.problem.skills}})
-
-
           res.render("showProblem")
         } catch (e) {
               console.log("Error in showProblem: "+e)
@@ -624,6 +578,26 @@ app.get('/showProblem/:probId',
       }
 )
 
+app.get('/startProblem/:probId',
+   async (req,res,next) => {
+      const result = await Problem.updateOne({_id:req.params.probId},{allowAnswers:true})
+      res.redirect('/showProblem/'+req.params.probId)
+})
+
+app.get('/stopProblem/:probId',
+   async (req,res,next) => {
+      const result = await Problem.updateOne({_id:req.params.probId},{allowAnswers:false})
+      res.redirect('/showProblem/'+req.params.probId)
+})
+
+
+app.get('/updateSchema',
+  async (req,res,next) => {
+    const result = await Problem.updateMany({},{allowAnswers:true})
+    //console.dir(result)
+    res.redirect("/")
+  }
+)
 
 
 app.get('/showAllAnswers/:probId',
@@ -637,7 +611,7 @@ app.get('/showAllAnswers/:probId',
             await Review.find({problemId:id,reviewerId:req.user._id})
           res.locals.numReviews = userReviews.length
           res.locals.canView =
-              ((res.locals.numReviews>=5) ||
+              ((res.locals.numReviews>=2) ||
                (req.user._id.equals(course.ownerId)))
           if (!res.locals.canView){
               res.locals.answers=[]
@@ -648,6 +622,11 @@ app.get('/showAllAnswers/:probId',
               .sort({answer:1})
             res.locals.reviews = await Review.find({problemId:id})
           }
+          res.locals.isTA =
+              req.user.taFor &&
+              req.user.taFor.includes(course._id)
+          const taList = await User.find({taFor:res.locals.problem.courseId})
+          res.locals.taList = taList.map(x => x._id)
           res.render('showAllAnswers')
       }
     catch(e){
@@ -661,10 +640,6 @@ app.get('/editProblem/:probId',
     const id = req.params.probId
     res.locals.probId = id
     res.locals.problem = await Problem.findOne({_id:id})
-    res.locals.skills =
-        await Skill.find({_id: {$in:res.locals.problem.skills}})
-    res.locals.allSkills =
-            await Skill.find({courseId:res.locals.problem.courseId})
     res.locals.course =
         await Course.findOne({_id:res.locals.problem.courseId},'ownerId')
     res.render("editProblem")
@@ -675,7 +650,6 @@ app.post('/saveAnswer/:probId',
   async ( req, res, next ) => {
     const id = req.params.probId
     res.locals.problem = await Problem.findOne({_id:id})
-    await Answer.deleteMany({problemId:res.locals.problem._id,studentId:req.user.id})
     const problem = res.locals.problem
 
     let newAnswer = new Answer(
@@ -692,23 +666,61 @@ app.post('/saveAnswer/:probId',
          }
         )
 
-    await Answer.deleteMany(
-      {studentId:req.user._id,
-       problemId:problem._id}
-     )
-
     newAnswer.save()
       .then( (a) => {
           res.locals.answered = true
           res.locals.answer = a
       }
     )
-    console.log('in saveAnswer')
-    //res.redirect("/showProblemSet/"+problem.psetId)
+
     res.redirect("/showProblem/"+id)
   }
 )
 
+app.get('/gradeProblem/:probId/:studentId',
+async (req,res,next) => {
+  try{
+    const probId = req.params.probId
+    const studentId = req.params.studentId
+
+    let problem = await Problem.findOne({_id:probId})
+    res.locals.student = await User.findOne({_id:studentId})
+
+
+    let answer =
+        await Answer.findOne({problemId:probId,studentId:studentId})
+
+    //console.log("answer= "+JSON.stringify(answer))
+    // and we need to add it to the problem.pendingReviews
+    res.locals.answer = answer
+    res.locals.problem = problem
+
+    let myReviews = []
+    if (answer!=undefined){
+      myReviews =
+        await Review.find({problemId:problem._id,
+                           answerId:answer._id,
+                           reviewerId:req.user._id})
+    }
+    res.locals.numReviewsByMe = myReviews.length
+    res.locals.alreadyReviewed = (myReviews.length>0)
+
+
+    //console.log('\n\n\nmy reviews='+JSON.stringify(myReviews))
+    //console.log(res.locals.numReviewsByMe)
+    if (true || res.locals.alreadyReviewed){
+      res.redirect('/showReviewsOfAnswer/'+answer._id)
+    } else {
+      res.render("reviewAnswer")
+    }
+  }
+  catch(e){
+    next(e)
+  }
+ }
+)
+
+
 
 app.get('/reviewAnswers/:probId',
 async (req,res,next) => {
@@ -727,8 +739,8 @@ async (req,res,next) => {
 
           if (x.timeSent<tooOld) {
             expiredReviews.push(x)
-            console.log("\nremoved an expired review ")
-            console.dir(x)
+            //console.log("\nremoved an expired review ")
+            //console.dir(x)
 
             return false
           } else {
@@ -750,11 +762,11 @@ async (req,res,next) => {
           tempAnswer.pendingReviewers.filter((r)=>{
             if (r.equals(x.reviewerId)) {
               tempAnswer.numReviews -= 1
-              console.log("\nremoved reviewer '+r+' from pending reviews: ")
-              console.dir(x)
+              //console.log("\nremoved reviewer '+r+' from pending reviews: ")
+              //console.dir(x)
               return false
             } else {
-              console.log('not removing '+r+' from pending reviewers')
+              //console.log('not removing '+r+' from pending reviewers')
               return true
             }
           }
@@ -775,6 +787,8 @@ async (req,res,next) => {
     let answer = null
     while (i<answers.length){
       answer = answers[i]
+      //console.log(`user=${req.user._id}`)
+      //console.log(`answers[${i}] = ${JSON.stringify(answer)}`)
       if (!answer.reviewers.find((x)=>(x.equals(req.user._id)))
           &&
           !answer.pendingReviewers.find((x)=>(x.equals(req.user._id)))
@@ -798,6 +812,7 @@ async (req,res,next) => {
           break
         }
       else {
+        //console.log("reviewed this one!")
         answer=null
       }
       i++
@@ -807,16 +822,20 @@ async (req,res,next) => {
 
     // and we need to add it to the problem.pendingReviews
     res.locals.answer = answer
+    res.locals.student = {googlename:"",googleemail:""}
     res.locals.problem = problem
+    res.locals.alreadyReviewed = false
     res.locals.numReviewsByMe =
         await Review.find({problemId:problem._id,
                            reviewerId:req.user._id}).length
 
-    // get the skills for this problem
-    res.locals.skills =
-        await Skill.find({_id: {$in:res.locals.problem.skills}})
 
-    res.render("reviewAnswer")
+    //res.render("reviewAnswer")
+    if (answer) {
+      res.redirect('/showReviewsOfAnswer/'+answer._id)
+    } else {
+      res.render('reviewAnswer')
+    }
   }
   catch(e){
     next(e)
@@ -834,6 +853,8 @@ app.post('/saveReview/:probId/:answerId',
 
   async ( req, res, next ) => {
     try {
+      console.log("in saveReview")
+      console.dir(req.body)
 
       const problem =
           await Problem.findOne({_id:req.params.probId})
@@ -851,7 +872,6 @@ app.post('/saveReview/:probId/:answerId',
         studentId:answer.studentId,
         review:req.body.review,
         points:req.body.points,
-        skills:req.body.skill,
         upvoters: [],
         downvoters: [],
         createdAt: new Date()
@@ -915,17 +935,170 @@ app.post('/saveReview/:probId/:answerId',
   }
 )
 
+
+/*  saveReview
+  when we save a review we need to create a new review document
+  but also update the corresponding answer and problem documents
+  to store the new information about number of reviews and pending reviews
+  This is used when we generate an answer for a user to review
+*/
+app.post('/saveReview2/:probId/:answerId',
+
+async ( req, res, next ) => {
+  try {
+
+    console.log("in saveReview2")
+    console.dir(req.body)
+    console.dir(req.headers)
+    console.dir(req.method)
+
+    const problem =
+        await Problem.findOne({_id:req.params.probId})
+
+    const answer =
+        await Answer.findOne({_id:req.params.answerId})
+
+    const newReview = new Review(
+     {
+      reviewerId:req.user._id,
+      courseId:problem.courseId,
+      psetId:problem.psetId,
+      problemId:problem._id,
+      answerId:req.params.answerId,
+      studentId:answer.studentId,
+      review:req.body.review,
+      points:req.body.points,
+      upvoters: [],
+      downvoters: [],
+      createdAt: new Date()
+     }
+    )
+
+    await newReview.save()
+
+    // next we update the reviewers info in the answer object
+    answer.reviewers.push(req.user._id)
+    answer.numReviews += 1
+
+    let pendingReviewers = []
+
+    for (let i=0; i<answer.pendingReviewers.length; i++){
+      const reviewer = answer.pendingReviewers[i]
+
+      if (reviewer.equals(req.user._id)){
+        answer.numReviews -= 1
+
+        // because we incremented it when we sent the review to user
+      } else {
+        pendingReviewers.push(reviewer)
+      }
+    }
+    answer.pendingReviewers = pendingReviewers
+    answer.markModified('pendingReviewers')
+
+    await answer.save()
+
+    // finally we update the pendingReviews field of the problem
+    // to remove this reviewer on this answer, if necessary
+    // the reviewInfo might have been removed earlier if they
+    // timed out before completing their review...
+    let pendingReviews=[]
+    for (let i=0; i<problem.pendingReviews.length; i++){
+      reviewInfo = problem.pendingReviews[i]
+
+      if (reviewInfo.answerId.equals(answer._id) &&
+          reviewInfo.reviewerId.equals(req.user._id)){
+        // don't push answer just reviewed by this user back into pendingReviews
+      } else {
+        pendingReviews.push(reviewInfo)
+      }
+    }
+
+    problem.pendingReviews = pendingReviews
+
+    problem.markModified('pendingReviews')
+
+
+    await problem.save()
+
+    //res.redirect('/showReviewsOfAnswer/'+answer._id)
+    res.redirect('/reviewAnswers/'+problem._id)
+    // we can now redirect them to review more answers
+    // res.redirect('/reviewAnswers/'+req.params.probId)
+  }
+  catch(e){
+    next(e)
+  }
+}
+)
+
+
+app.post('/removeReviews',
+  async ( req, res, next ) => {
+    try {
+      /*
+      We need to remove delete the Review, but also
+      to remove the reviewerId from the list of reviewers
+      for the answer...
+      */
+      let deletes = req.body.deletes
+      //console.log(`deletes=${deletes}`)
+      //console.log(`type(deletes)=${typeof(deletes)}`)
+      let reviews = null
+
+      if (!deletes){
+        res.send("nothing to delete")
+        return
+      } else if (typeof(deletes)=="string"){
+        let review = await Review.findOne({_id:deletes})
+        reviews = [review]
+      } else {
+        reviews = await Review.find({_id:{$in:deletes}})
+      }
+      //console.log("reviews="+JSON.stringify(reviews))
+      let answerId = reviews[0].answerId
+      let reviewerIds = reviews.map(r=>r.reviewerId)
+      let answer = await Answer.findOne({_id:answerId})
+
+      //console.log(`answer= ${JSON.stringify(answer)}`)
+      //console.log(`answer.reviewers=${JSON.stringify(answer.reviewers)}`)
+      //console.log(`reviewerIds= ${JSON.stringify(reviewerIds)}`)
+      //console.log(answer.reviewers.indexOf(reviewerIds[0]))
+      const newReviewerIds = removeElements(answer.reviewers,reviewerIds)
+      //console.log('nri = '+JSON.stringify(newReviewerIds))
+      answer.reviewers = newReviewerIds
+      await answer.save()
+      await Review.deleteMany({_id:{$in: deletes}})
+      res.send("just updating answer ...")
+    }
+    catch(e){
+      next(e)
+    }
+  }
+)
+
+function removeElements(slist, rems){
+  for (let i=0; i<rems.length; i++){
+     slist = slist.filter(s =>
+       {const z = (!s.equals(rems[i]))
+         //console.log(`${s} ${rems[i]} ${z}`)
+         return z})
+      //console.log(`${i}  ${JSON.stringify(slist)}`)
+   }
+   return slist
+}
+
 app.get('/showReviewsOfAnswer/:answerId',
   async ( req, res, next ) => {
     try {
       const id = req.params.answerId
       res.locals.answer = await Answer.findOne({_id:id})
       res.locals.problem = await Problem.findOne({_id:res.locals.answer.problemId})
-      res.locals.reviews =
-          await Review.find({answerId:id})
-                      .sort({points:'asc',review:'asc'})
-
-
+      res.locals.student = await User.findOne({_id:res.locals.answer.studentId})
+      res.locals.reviews = await Review.find({answerId:id})
+                            .sort({points:'asc',review:'asc'})
+      const taList = await User.find({taFor:res.locals.problem.courseId})
+      res.locals.taList = taList.map(x => x._id)
       res.render("showReviewsOfAnswer")
       }
     catch(e){
@@ -934,6 +1107,51 @@ app.get('/showReviewsOfAnswer/:answerId',
     }
 )
 
+app.post('/giveGoodGrade/:probId/:answerId',
+  async (req,res,next) => {
+
+    let answerId = req.params.answerId
+    let userId = req.params.userId
+    let review = req.body.review
+    let points = req.body.points
+    console.log("in giveGoodGrade")
+    console.log(review+" "+points)
+    console.log("req.body=")
+    console.dir(req.body)
+
+
+    const problem =
+        await Problem.findOne({_id:req.params.probId})
+
+    const answer =
+        await Answer.findOne({_id:req.params.answerId})
+
+    const newReview = new Review(
+     {
+      reviewerId:req.user._id,
+      courseId:problem.courseId,
+      psetId:problem.psetId,
+      problemId:problem._id,
+      answerId:req.params.answerId,
+      studentId:answer.studentId,
+      review:req.body.review,
+      points:req.body.points,
+      upvoters: [],
+      downvoters: [],
+      createdAt: new Date()
+     }
+    )
+
+    await newReview.save()
+
+    answer.reviewers.push(req.user._id)
+    answer.numReviews += 1
+
+    answer.save()
+
+    res.send("testing giveGoodGrade")
+  })
+
 app.get('/thumbsU/:mode/:reviewId/:userId',
   async (req,res,next) => {
     let reviewId = req.params.reviewId
@@ -1025,8 +1243,8 @@ app.get('/showTheStudentInfo/:option/:courseId',
             req.user._id.equals(res.locals.courseInfo.ownerId)
 
         if (!(isOwner || isTA)) {
-          console.log('isOwner = '+isOwner)
-          console.log('isTA = '+isTA)
+          //console.log('isOwner = '+isOwner)
+          //console.log('isTA = '+isTA)
           res.send("only the course owner and TAs can see this page")
           return
         }
@@ -1036,6 +1254,13 @@ app.get('/showTheStudentInfo/:option/:courseId',
             await CourseMember.find({courseId:res.locals.courseInfo._id})
         res.locals.students = memberList.map((x)=>x.studentId)
 
+        // student status is a map from id to status
+        // we can use this to filter student based on their statue
+        // e.g. enrolled, dropped, ta, guest, owner, ...
+        // we will need a page to see all students and edit their statuses
+        res.locals.studentStatus = new Map()
+        memberList.map((x)=>{res.locals.studentStatus.set(x.studentId,x.status)})
+
         res.locals.studentsInfo =
             await User.find({_id:{$in:res.locals.students}})
 
@@ -1058,15 +1283,17 @@ app.get('/showTheStudentInfo/:option/:courseId',
 
 
         res.locals.gradeSheet = gradeSheet
-
+/*
         await Course.findOneAndUpdate(
                 {_id:courseId},
-                {$set:{gradeSheet:gradeSheet,gradesUpdateTime:new Date()}},
+                {$set:{gradeSheet:{},gradesUpdateTime:new Date()}},
                 {new:true})
-
+*/
 
         if (req.params.option == 'all'){
           res.render("showAllStudentInfo")
+        } else if (req.params.option == 'csv'){
+          res.render("showStudentInfoCSV")
         } else {
           res.render("showStudentInfo")
         }
@@ -1083,7 +1310,7 @@ app.get('/showOneStudentInfo/:courseId/:studentId',
   async (req, res, next) => {
     try {
       res.locals.courseInfo =
-          await Course.findOne({_id:req.params.courseId},'name ownerId gradeSheet')
+          await Course.findOne({_id:req.params.courseId},'name ownerId')
       res.locals.studentInfo =
           await User.findOne({_id:req.params.studentId})
 
@@ -1098,6 +1325,35 @@ app.get('/showOneStudentInfo/:courseId/:studentId',
         return
       }
 
+      // get the list of ids of students in the course
+      const memberList =
+          await CourseMember.find({courseId:res.locals.courseInfo._id})
+      res.locals.students = memberList.map((x)=>x.studentId)
+
+      res.locals.studentsInfo =
+          await User.find({_id:{$in:res.locals.students}})
+
+      const courseId = res.locals.courseInfo._id
+      res.locals.answers =
+          await Answer.find({courseId:courseId})
+
+      res.locals.problems =
+          await Problem.find({courseId:courseId})
+
+      res.locals.reviews =
+          await Review.find({courseId:courseId})
+
+      const gradeSheet =
+         createGradeSheet(
+           res.locals.studentsInfo,
+           res.locals.problems,
+           res.locals.answers,
+           res.locals.reviews)
+
+
+      res.locals.gradeSheet = gradeSheet
+
+
       res.render("showOneStudentInfo")
     }
     catch(e){
@@ -1109,15 +1365,15 @@ app.get('/showOneStudentInfo/:courseId/:studentId',
 app.post('/addTA/:courseId',
   async (req,res,next) => {
     try {
-      console.log("in addTA handler "+req.body.email)
+      //console.log("in addTA handler "+req.body.email)
       let ta =
         await User.findOne({googleemail:req.body.email})
       if (ta){
         ta.taFor = ta.taFor || []
         ta.taFor.push(req.params.courseId)
         ta.markModified('taFor')
-        console.log("updating ta "+ta._id)
-        console.dir(ta)
+        //console.log("updating ta "+ta._id)
+        //console.dir(ta)
         await ta.save()
       }
       res.redirect('/showTAs/'+req.params.courseId)
@@ -1129,18 +1385,18 @@ app.post('/addTA/:courseId',
 app.post('/removeTAs/:courseId',
 async (req,res,next) => {
   try {
-    console.log("in removeTAs handler ")
-    console.dir(req.body)
-    console.log(typeof req.body.ta)
+    //console.log("in removeTAs handler ")
+    //console.dir(req.body)
+    //console.log(typeof req.body.ta)
     if (req.body.ta == null){
-      console.log("nothing to delete")
+      //console.log("nothing to delete")
     } else if (typeof req.body.ta == 'string') {
-      console.log("delete "+req.body.ta)
+      //console.log("delete "+req.body.ta)
       await User.update({_id:req.body.ta},{$set:{taFor:[]}})
     } else {
-      console.log("delete several:")
+      //console.log("delete several:")
       req.body.ta.forEach(async (x) => {
-        console.log('x='+x)
+        //console.log('x='+x)
         await User.update({_id:x},{$set:{taFor:[]}})
       })
     }
@@ -1159,7 +1415,7 @@ app.get('/showTAs/:courseId',
           await Course.findOne({_id:req.params.courseId},'name ownerId coursePin')
       res.locals.tas =
         await User.find({taFor:req.params.courseId})
-      console.log("in showTAs handler")
+      //console.log("in showTAs handler")
 
 
       res.render('showTAs')
@@ -1169,125 +1425,98 @@ app.get('/showTAs/:courseId',
 
   })
 
-app.get('/resetNumReviews',
-  async (req, res, next) => {
-   if (req.user.googleemail != "tjhickey@brandeis.edu"){
-    res.send('you are not allowed to do this!')
-  }else {
-    try {
-      const answers =
-          await Answer.find({})
-      answers.forEach(async (x) => {
-        const len = x.reviewers.length
-        x.numReviews = len
-        x.pendingReviewers = []
-        x.markModified('pendingReviewers')
-        await x.save()
-      })
-      const problems = await Problem.find({})
-      problems.forEach(async (p) => {
-        if (p.pendingReviews.length > 0){
-          p.pendingReviews = []
-          p.markModified('pendingReviews')
-          await p.save()
-        }
-      })
-    }catch(e){
-      console.log("caught an error: "+e)
-      console.dir(e)
-    }
-    res.redirect('/')
-   }
-  }
-)
-
-app.get('/addSkill/:courseId',
-      (req,res) => {
-        res.locals.courseId = req.params.courseId
-        res.render('addSkill')
-      })
-
-
-app.post('/addSkill',
-  async ( req, res, next ) => {
-    try {
-      let newSkill = new Skill(
-       {
-        name: req.body.name,
-        description: req.body.description,
-        createdAt: new Date(),
-        courseId: req.body.courseId
-       }
-      )
 
-      await newSkill.save()
-      res.redirect('/showCourse/'+req.body.courseId);
+  // add the studentId to each Review ...
+  app.get('/updateReviews',
+    async (req, res, next) => {
+     if (req.user.googleemail != "tjhickey@brandeis.edu"){
+      res.send('you are not allowed to do this!')
+      //console.log("did we get here???  Yes we did!!")
+      return
+    }else {
+      res.send("we aren't doing this anymore!")
+      //console.log("did we get here???  Yes we did!!")
+      return
+      try {
+        let counter=0
+        const reviews = await Review.find({})
+        reviews.forEach(async (r) => {
+          // lookup the answer, get the studentId,
+          // and add it to the review, and save it...
+          answer = await Answer.findOne({_id:r.answerId})
+          //console.log(counter+": "+r._id+" "+answer.studentId)
+          counter += 1
+          r.studentId = answer.studentId
+          await r.save()
+        })
+      }catch(e){
+        console.log("caught an error: "+e)
+        console.dir(e)
       }
-    catch(e){
-      next(e)
+      res.send('all done')
+     }
     }
-  }
-)
+  )
 
-app.get('/showSkill/:skillId',
-      async (req, res, next) => {
-        try {
-          const skillId = req.params.skillId
-          res.locals.skillId = skillId
-          res.locals.skill =
-               await Skill.findOne({_id:skillId})
-          let courseId = res.locals.skill.courseId
-          res.locals.courseInfo =
-               await Course.findOne({_id:courseId},'name ownerId')
-          res.locals.isOwner = (res.locals.courseInfo.ownerId == req.user.id)
-          res.render("showSkill")
-        } catch (e) {
-              console.log("Error in showSkill: "+e)
-              next(e)
-        }
+  // add the studentId to each Review ...
+  app.get('/updateReviews2',
+    async (req, res, next) => {
+     if (req.user.googleemail != "tjhickey@brandeis.edu"){
+      res.send('you are not allowed to do this!')
+    }else {
+      try {
+        // for each answer, find all of the reviews of that answer
+        // create the reviewers field of the answer and set it
+        let counter=0
+        const answers = await Answer.find({})
+        answers.forEach(async (a) => {
+          try {
+            //  answer, get the studentId,
+            // and add it to the review, and save it...
+            reviews = await Review.find({answerId:a._id})
+            reviewers = reviews.map(r=>r.reviewerId)
+            //console.log(a._id+" "+JSON.stringify(reviewers))
+            a.reviewers = reviewers
+            await a.save()
+          }catch(e){
+            console.log("caught an error updating an answer: "+e)
+          }
+        })
+      }catch(e){
+        console.log("caught an error: "+e)
+        console.dir(e)
       }
-)
-
-app.get('/editSkill/:skillId',
-  async ( req, res, next ) => {
-    try {
-      const id = req.params.skillId
-      res.locals.skillId = id
-      res.locals.skill = await Skill.findOne({_id:id})
-      res.render("editSkill")
-    } catch(e) {
-      next(e)
+      res.send('all done')
+     }
     }
-  }
-)
-
-
-app.post('/editSkill/:skillId',
-  async ( req, res, next ) => {
-    try {
-      const skill =
-          await Skill.findOne({_id:req.params.skillId})
-
-      skill.name = req.body.name
-      skill.description = req.body.description
-      skill.createdAt = new Date()
+  )
 
-      await skill.save()
 
-      res.redirect("/showSkill/"+req.params.skillId)
-    }
-    catch(e){
-      next(e)
+  app.get('/removeGradeSheets',
+    async (req, res, next) => {
+     if (req.user.googleemail != "tjhickey@brandeis.edu"){
+      res.send('you are not allowed to do this!')
+    }else {
+      try {
+        let counter=0
+        const courses = await Course.find({})
+        courses.forEach(async (c) => {
+          // lookup the answer, get the studentId,
+          // and add it to the review, and save it...
+          c.gradeSheet = {}
+          //console.log('updated course :'+JSON.stringify(c))
+          await c.save()
+        })
+      }catch(e){
+        console.log("caught an error: "+e)
+        console.dir(e)
+      }
+      res.send('all done')
+     }
     }
-  }
-)
+  )
 
-// app.delete('/skills/:skillId',
-//   Skill.deleteOne({_id: req.params.skillID})
-// )
 
-// THIS NEEDS TO GO AFTER ALL OTHER ROUTES
-// OR ELSE THEY WILL BE REPLACED WITH 404 RESPONSES
 // catch 404 and forward to error handler
 app.use(function(req, res, next) {
   next(createError(404));
@@ -1305,6 +1534,8 @@ app.use(function(err, req, res, next) {
 });
 
 
+
+
 function createGradeSheet(students, problems, answers, reviews){
   let gradeSheet = {}
   let problemList = {}
@@ -1322,28 +1553,41 @@ function createGradeSheet(students, problems, answers, reviews){
     try {
 
       answerList[answer._id]= answer
+      if (answer==undefined){
+        console.log('answer undefined a='+a)
+      }else if (!('studentId' in answer)){
+        console.log('answer.studentId undefined. answer =')
+        console.dir(answer)
+      }
       // it is possible that a TA will not be a student
       // so we need to create a
       gradeSheet[answer.studentId] =
           gradeSheet[answer.studentId] || {status:'non-student',student:'non-student',answers:{}}
       gradeSheet[answer.studentId]['answers'][answer._id]
         ={answer:answer, reviews:[]}
-    } catch(e){
+    } catch(error){
       console.log("Error in createGradeSheet: "+error.message+" "+error)
+      console.log(error)
     }
   }
 
   for (let r in reviews) {
     let review = reviews[r]
     try {
+      // the problem is that review.answerId might correspond to an answer
+      // that I deleted!  but there is another duplicate with the same
+      // review.studentId and same review.problemId, so I may need to redesign.
+      // I could create an updateReviews route that would update all
+      // review.answerIds based on the studentId and problemId
       let z =
         gradeSheet[answerList[review.answerId].studentId]
           ['answers'][review.answerId]
       //z['reviews'] = z['reviews']||[]
       z['reviews'].push(review)
-    } catch(e){
+    } catch(error){
       console.log("Error in createGradeSheet-2s: "+error.message+" "+error)
-
+      console.log("error.lineNumber = "+error.linenNumber)
+      console.log("stack: "+error.stack)
 
     }
   }
@@ -1352,7 +1596,4 @@ function createGradeSheet(students, problems, answers, reviews){
   return {grades:gradeSheet,problems:problemList,answers:answerList}
 }
 
-
-
-
 module.exports = app;
diff --git a/models/CourseMember.js b/models/CourseMember.js
index 15681cf..0a6f47f 100644
--- a/models/CourseMember.js
+++ b/models/CourseMember.js
@@ -7,6 +7,7 @@ var courseMemberSchema = Schema( {
   studentId: {type:ObjectId,index:true},
   courseId: {type:ObjectId,index:true},
   createdAt: Date,
+  status: String,
 } );
 
 module.exports = mongoose.model( 'CourseMember', courseMemberSchema );
diff --git a/models/Problem.js b/models/Problem.js
index d1fd7e5..45ab442 100644
--- a/models/Problem.js
+++ b/models/Problem.js
@@ -12,9 +12,7 @@ var problemSchema = Schema( {
   rubric: String,
   pendingReviews: mongoose.Schema.Types.Mixed,
   createdAt: Date,
-  skills:[ObjectId],
-  visible: {type:Boolean, default: true}, // does it appear on students screens?
-  reviewable: {type:Boolean,default:true}, // can students review others after they submit?
+  allowAnswers: Boolean,
 } );
 /*
   pendingReviews is a list of JSON objects of the form:
diff --git a/models/ProblemSet.js b/models/ProblemSet.js
index 0b17a2b..b57c5b2 100644
--- a/models/ProblemSet.js
+++ b/models/ProblemSet.js
@@ -7,7 +7,6 @@ var problemSetSchema = Schema( {
   courseId: {type:ObjectId,index:true},
   name: String,
   createdAt: Date,
-  visible: Boolean,
 } );
 
 module.exports = mongoose.model( 'ProblemSet', problemSetSchema );
diff --git a/models/Review.js b/models/Review.js
index 79e7624..be2de65 100644
--- a/models/Review.js
+++ b/models/Review.js
@@ -12,7 +12,6 @@ var reviewSchema = Schema( {
   studentId: {type:ObjectId,index:true},
   review: String,
   points: Number,
-  skills:[ObjectId],
   upvoters: [Schema.Types.ObjectId],
   downvoters: [Schema.Types.ObjectId],
   createdAt: Date,
diff --git a/models/Skill.js b/models/Skill.js
deleted file mode 100644
index 4d6aa30..0000000
--- a/models/Skill.js
+++ /dev/null
@@ -1,13 +0,0 @@
-'use strict';
-const mongoose = require( 'mongoose' );
-const Schema = mongoose.Schema;
-const ObjectId = mongoose.Schema.Types.ObjectId;
-
-var skillSchema = Schema( {
-    name: String,
-    description: String,
-    createdAt: Date,
-    courseId: ObjectId,
-  } );
-
-module.exports = mongoose.model( 'Skill', skillSchema );
diff --git a/views/addProblem.ejs b/views/addProblem.ejs
index b61d959..50cbb84 100644
--- a/views/addProblem.ejs
+++ b/views/addProblem.ejs
@@ -13,15 +13,8 @@
         <br>
         Rubric:<br>
         Points: <input type="text" name="points"><br>
-        <br>
         <textarea name="rubric" cols="100" rows="10"></textarea>
         <br>
-        Skills:
-          <select name="skills" multiple size="5">
-            <% for(let i=0; i<skills.length; i++){ %>
-            <option value="<%= skills[i].id %>"> <%= skills[i].name %> </option>
-            <% } %>
-           </select>
         <input class="btn btn-lg btn-primary" type="submit">
     </form>
 
diff --git a/views/addProblemSet.ejs b/views/addProblemSet.ejs
index 338e514..4e40317 100644
--- a/views/addProblemSet.ejs
+++ b/views/addProblemSet.ejs
@@ -9,7 +9,6 @@
         You own this course<br>
         <form method="post" action="/saveProblemSet/<%= courseId %>">
             Problem Set Name: <input type="text" name="name"><br>
-            Visible:<input type='checkbox' name="visible" value="visible"><br>
             <input class="btn btn-primary" type="submit" value="Save">
         </form>
     <% } else { %>
diff --git a/views/addSkill.ejs b/views/addSkill.ejs
deleted file mode 100644
index 1e487c8..0000000
--- a/views/addSkill.ejs
+++ /dev/null
@@ -1,19 +0,0 @@
-<%- include('bootheader') -%>
-<%- include('menubar') -%>
-    <div class="jumbotron">
-        <h1>Add Skill</h1>
-    </div>
-
-    <form method="POST" action="/addSkill">
-        <input type="hidden" name="courseId" value="<%= courseId %>">
-        Skill Name:<br>
-        <input type="text" name="name">
-        <br>
-        Skill Description:<br>
-        <textarea name="description" cols="100" rows="10"></textarea>
-        <br>
-        <input class="btn btn-lg btn-primary" type="submit">
-    </form>
-
-
-<%- include('bootfooter') -%>
</body>

</html>
diff --git a/views/bootheader.ejs b/views/bootheader.ejs
index b6655e5..b3e8139 100644
--- a/views/bootheader.ejs
+++ b/views/bootheader.ejs
@@ -5,7 +5,7 @@
     <meta charset="utf-8">
     <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
 
-    <title>Specs Grading App</title>
+    <title><%= title %></title>
     <!-- fontawesome icons s-->
     <script src="https://kit.fontawesome.com/35cb21a65b.js" crossorigin="anonymous"></script>
     <!-- CSS for Bootstrap -->
diff --git a/views/createCourse.ejs b/views/createCourse.ejs
index 071d54e..2749a87 100644
--- a/views/createCourse.ejs
+++ b/views/createCourse.ejs
@@ -2,12 +2,26 @@
<%- include('menubar') -%>
     <div class="jumbotron">
         <h1>Create a Course</h1>
-        <p> add your info below</p>
+        <p> enter a new course name and hit return</p>
     </div>
 
     <form method="post" action="createNewCourse">
-        Course Name: <input type="text" name="courseName" placeholder="Brandeis CS10a-02 Fall19">
+        Course Name: <input type="text" name="courseName" placeholder="enter course name here">
+        <br>
+        <input type="checkbox" name="norobot"> I am not a robot <br>
+        <input type="checkbox" name="robot"> I am a robot<br><br>
+        <input class="btn btn-md btn-danger" type="submit" value="Create the new course">
     </form>
+    <hr>
+    <p>
+        Select a name which will easily identify your course.
+        For example give the Course id,section and semester, e.g. COSI10a-02 Spr20
+        The course name will only be visible to you and the students who
+        register in your course.
+    </p>
+    <p> Students register using a 7 digit pin number which will be
+        created for you when you make this course.
+    </p>
 
 
<%- include('bootfooter') -%>
</body>

</html>
diff --git a/views/editProblem.ejs b/views/editProblem.ejs
index 8459448..56921fc 100644
--- a/views/editProblem.ejs
+++ b/views/editProblem.ejs
@@ -8,15 +8,6 @@
     </div>
 
     <form method="post" action="/updateProblem/<%= problem._id %>">
-        <br>
-        Visible: <input type="checkbox" name='visible'
-                        <% if (problem.visible) {%> checked <% }%>
-                        value='visible'> <br>
-
-        Reviewable: <input type="checkbox" name='reviewable'
-                        <% if (problem.reviewable) {%> checked <% }%>
-                        value='reviewable'> <br>
-        <hr>
         Problem Title:<br>
         <input type="text" name="description" value="<%= problem.description %>">
         <br>
@@ -26,21 +17,7 @@
         Rubric:<br>
         Points: <input type="text" name="points" value="<%= problem.points %>"><br>
         <textarea name="rubric" cols="100" rows="10"><%= problem.rubric %></textarea>
-
-        <h2>Skills</h2>
-
-        <% let skillIds=skills.map((x)=>x.id); console.log(skillIds) %>
-
-        <% for(let i=0;i<allSkills.length;i++){%>
-        <input type="checkbox"
-               name="skill"
-               value="<%= allSkills[i]._id%>"
-               <% if (skillIds.includes(allSkills[i].id)) {%> checked <%}%>
-               >
-        <%= allSkills[i].name %><br>
-
-        <% } %>
-        <hr>
+        <br>
         <input class="btn btn-lg btn-primary" type="submit">
     </form>
 
diff --git a/views/editProblemSet.ejs b/views/editProblemSet.ejs
deleted file mode 100644
index a9da20a..0000000
--- a/views/editProblemSet.ejs
+++ /dev/null
@@ -1,22 +0,0 @@
-<%- include('bootheader') -%>
-<%- include('menubar') -%>
-
-    <% if (user._id.equals(courseInfo.ownerId)) { %>
-        You own this course<br>
-        <form method="post" action="/updateProblemSet/<%= psetId %>">
-            Problem Set Name:
-            <input type="text" name="name" value="<%= problemSet.name %>">
-            <br>
-            visible: <input type="checkbox" name="visible"
-                   <% if (problemSet.visible) {%> checked <% } %>
-                   value="visible"
-               >
-            <br>
-            <input class="btn btn-primary" type="submit" value="Save">
-        </form>
-    <% } else { %>
-        Only the owner can update problem sets.
-    <%} %>
-
-
-<%- include('bootfooter') -%>
</body>

</html>
diff --git a/views/editSkill.ejs b/views/editSkill.ejs
deleted file mode 100644
index c0fb0ad..0000000
--- a/views/editSkill.ejs
+++ /dev/null
@@ -1,19 +0,0 @@
-<%- include('bootheader') -%>
-<%- include('menubar') -%>
-
-    <div class="jumbotron">
-        <h1>Edit Skill</h1>
-    </div>
-
-    <form method="post" action="/editSkill/<%= skill._id %>">
-        Skill Name:<br>
-        <input type="text" name="name" value="<%= skill.name %>">
-        <br>
-        Skill Description:<br>
-        <textarea name="description" cols="100" rows="10"><%= skill.description %></textarea>
-        <br>
-        <input class="btn btn-lg btn-primary" type="submit">
-    </form>
-
-
-<%- include('bootfooter') -%>
</body>

</html>
diff --git a/views/gradeProblemSet.ejs b/views/gradeProblemSet.ejs
index b1e74bf..2e3ac89 100644
--- a/views/gradeProblemSet.ejs
+++ b/views/gradeProblemSet.ejs
@@ -48,8 +48,8 @@
                            r =>{
                                let zz = (r.problemId && r.problemId.equals(problems[j]._id))
                                    && (r.studentId && r.studentId.equals(studentsInfo[i]._id))
-                                   console.log(`${zz} ${i} ${j}  ${problems[j]._id} ${r.problemId} ${studentsInfo[i]._id} ${r.studentId}`)
-                                   console.log(JSON.stringify(r,null,5))
+                                   //console.log(`${zz} ${i} ${j} ${r.problemId} ${problems[j]._id} ${studentsInfo[i]._id} ${r.studentId}`)
+
                                return(zz)
                            })
                            answerId = null
diff --git a/views/index.ejs b/views/index.ejs
index 67b7d96..60d3a17 100644
--- a/views/index.ejs
+++ b/views/index.ejs
@@ -4,19 +4,24 @@
 <% } %>
 
     <div class="jumbotron">
-        <h1>Specs Grading App</h1>
+        <h1>Peer Review App</h1>
 
         <h2>Promoting Engaged Learning</h2>
     </div>
     <% if (!loggedIn){ %>
-        <h2>You must login to use the Specs Grading App:
+        <h2>You must login through Brandeis to use the Peer Review App:
          <a class="btn btn-lg btn-danger" href="/auth/google"> Login</a>
          </h2>
     <% } else {%>
         <form method="post" action="/joinCourse">
         Enroll in a course:
         <input type="input" name="coursePin" placeholder="7 digit pin"s>
+        or
+        <a href="/createCourse">Create a new course</a>
+        or
+        <a href="/stats">View usage statistics</a>
         </form>
+
         <hr>
         <div class="row">
             <div class="col bg-warning">
diff --git a/views/login.ejs b/views/login.ejs
index 5f32ad6..53f4459 100644
--- a/views/login.ejs
+++ b/views/login.ejs
@@ -1,7 +1,9 @@
<%- include('bootheader') -%>
     <div class="jumbotron">
-        <h1>Login to the Specs Grading App </h1>
-        <p> You must have a gmail account to login to the Peer Review App </p>
+        <h1>Login to the Peer Review App </h1>
+        <p> You must have a Brandeis University login to login to the Peer Review App on this server.
+            See <a href="https://github.com/tjhickey724/PeerReviewApp/blob/v2.1/README.md">the github source code </a> if you want to set up your own server.
+        </p>
         <a class="btn btn-danger" href="/auth/google">
             <span class="fa fa-google-plus"> Google</span>
         </a>
diff --git a/views/menubar.ejs b/views/menubar.ejs
index ca712f7..ecc7a7e 100644
--- a/views/menubar.ejs
+++ b/views/menubar.ejs
@@ -1,5 +1,5 @@
-<nav class="navbar navbar-expand-lg navbar-light bg-info ">
-  <a class="navbar-brand" href="/">Specs Grading App </a>
+<nav class="navbar navbar-expand-lg navbar-light bg-primary ">
+  <a class="navbar-brand" href="/">Peer Review App</a>
   <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
     <span class="navbar-toggler-icon"></span>
   </button>
@@ -53,8 +53,10 @@
           <li class="nav-item ml-auto">
             <a class="nav-link active" href="/profile">
                <%= user.googlename %>
+               (<%= user.googleemail %>)
             </a>
 
+
           </li>
 
       <% } else { %>
diff --git a/views/reviewAnswer.ejs b/views/reviewAnswer.ejs
index 4e78472..fa325a7 100644
--- a/views/reviewAnswer.ejs
+++ b/views/reviewAnswer.ejs
@@ -1,12 +1,17 @@
<%- include('bootheader') -%>
<%- include('menubar') -%>
 
-
+  <h2>Grading </h2>
+      <% if (student && user.taFor && (user.taFor).indexOf(problem.courseId)>=0) { %>
+            <%= student.googlename %> <%= student.googleemail %>
+      <% } %>
+    <hr>
     <h3><%= problem.description %></h3>
     <b>The Question</b>
     <div class="bg-default" style="border:thin solid black; white-space: pre-wrap; font-family:monospace; padding:10px"><%= problem.problemText %></div>
     <% if (answer) { %>
         <hr>
+
         <b>Their Answer</b>
         <small>Submission time and date:<%= answer.createdAt %> </small>
         <pre class="bg-default"
@@ -30,16 +35,6 @@
                             <option> <%= j %> </option>
                         <% } %>
                     </select><br>
-
-                    <% for(let i=0;i<skills.length;i++){%>
-                        <input type="checkbox"
-                               name="skill"
-                               value="<%= skills[i]._id%>"
-                               >
-                        <%= skills[i].name %><br>
-                    <% } %>
-
-
                       <div class="form-group">
                           <label for="review">Enter your review below:</label>
                           <textarea class="form-control rounded-0" id="review" name="review" rows="10"></textarea>
@@ -58,7 +53,7 @@
         <div>
     <% } else { %>
         <hr>
-        <b class="bg-danger" style="padding:10px">You have reviewed all answers submitted so far </b>
+        <b class="bg-danger" style="padding:10px">There is nothing for you to review </b>
 
     <% } %>
     <hr>
diff --git a/views/showAllAnswers.ejs b/views/showAllAnswers.ejs
index 31d45df..e2fdc70 100644
--- a/views/showAllAnswers.ejs
+++ b/views/showAllAnswers.ejs
@@ -8,23 +8,53 @@
          style="border:thin solid black; white-space: pre-wrap; font-family:monospace; padding:10px"
        ><%= problem.problemText %></div>
     <hr>
+
     <% if (canView) { %>
-    <h2>All Answers with their Reviews</h2>
+    <h2>All <%= answers.length %> Answers with  <%= reviews.length %> Reviews, total</h2>
     <% for(let i=0; i<answers.length; i++){ %>
-        <div class="row">
+        <div class="row" style="padding-top:20px; margin-top:20px; border-top:thick solid black">
           <div class="col-md-12">
             <%= answers[i].createdAt %>
             <br>
-            <%= answers[i]._id %>
+            <h3>ANSWER</h3>
+            <% if (isTA) {%>
+              <div>
+              <% if (!(answers[i].reviewers.includes(user._id))){  %>
+                  <button  class="grader_<%=i%>"
+                                  id="cga_<%= i %>"
+                                  onclick="clickThumb(<%= i %>,'<%= answers[i]._id %>','<%= answers[i].problemId %>',<%= problem.points%>)"><%= problem.points%></button>
+                  <button  class="grader_<%=i%>"
+                                  id="cga_<%= i %>"
+                                  onclick="clickThumb(<%= i %>,'<%= answers[i]._id %>','<%= answers[i].problemId %>',<%= problem.points-1%>)"><%= problem.points-1%></button>
+                  <a  href="/showReviewsOfAnswer/<%= answers[i]._id %>"
+                     target="_blank">grade it</a>
+                   <button  class="grader_<%=i%>"
+                                   id="cga_<%= i %>"
+                                   onclick="clickThumb(<%= i %>,'<%= answers[i]._id %>','<%= answers[i].problemId %>',1)">1</button>
+                  <button  class="grader_<%=i%>"
+                                  id="cga_<%= i %>"
+                                  onclick="clickThumb(<%= i %>,'<%= answers[i]._id %>','<%= answers[i].problemId %>',0)">0</button>
+
+
+                <% } else { %>
+                  <a href="/showReviewsOfAnswer/<%= answers[i]._id %>"
+                     target="_blank">regrade it</a>
+                <% } %>
+              </div>
+            <% } %>
+
             <pre class="bg-warning"
                         style="border:thin solid black; white-space: pre-wrap; font-family:monospace; padding:10px"
                     ><%= answers[i].answer %></pre>
           </div>
         </div>
+        <h3> REVIEWS</h3>
+        <% let numReviews=0 %>
 
         <% for (let j=0; j<reviews.length; j++){ %>
 
           <% if (reviews[j].answerId.equals(answers[i]._id)) {
+             numReviews += 1
              let rev=reviews[j]
              let numLikesU = reviews[j].upvoters.length
              let userLikesU = reviews[j].upvoters.includes(user._id)
@@ -32,10 +62,18 @@
              let numLikesD = reviews[j].downvoters.length
              let userLikesD = reviews[j].downvoters.includes(user._id)
              let fa_prefixD = userLikesD?"fas":"far"
+
+             let taReviewer = taList.filter(x=> (x.equals(reviews[j].reviewerId)))
+             let isTAreview = taReviewer.length==1
+
+
              %>
 
             <div class="row">
               <div class="col-md-1">
+                <% if (isTAreview){%>
+                  <b style="color:rgb(255,0,0);font-size:16pt">Review by TA!!</b>
+                <% } %>
               </div>
                <div class="col">
                   <i  class="<%= fa_prefixU %> fa-thumbs-up"
@@ -54,9 +92,19 @@
                        .... grade:
                      <%= rev.points %>/<%= problem.points %>pts
                   </i>
-                   <% if (rev.reviewerId.equals(user._id)) {%>
+                  <% if (isTAreview){%>
+                    <span style="color:rgb(255,0,0);">TA REVIEW!!</span>
+                      <% if (rev.points< problem.points) { %>
+                       <div style="background:rgb(255,0,0);color:rgb(0,0,0);
+                       <% } else { %>
+                       <div style="background:rgb(0,255,0);color:rgb(0,0,0);
+                       <% } %>
+                  <% } else if (rev.points==0) { %>
+                      <div style="background:rgb(255,255,255);
+                  <% }else if (rev.reviewerId.equals(user._id)) {%>
                        <span style="color:rgb(220,120,255);">YOUR REVIEW!!</span>
                        <div style="background:rgb(220,120,255);
+
                    <% } else { %>
                        <div style="background:rgb(120,220,255);
                    <% } %>
@@ -68,12 +116,13 @@
             </div>
               <% }%>
               <% } %>
+              <% if (numReviews==0) {%> <b>no reviews yet</b> <%}%>
 
       <%} %>
     <% } else {%>
       <h1>More Reviews Needed</h1>
       You have reviewed <%= numReviews %> answers,
-      but must review at least 5 before you can see
+      but must review at least 2 before you can see
       all of the answers and reviews for this problem.
     <% } %>
 
diff --git a/views/showCourse.ejs b/views/showCourse.ejs
index 346ca8b..fecb39d 100644
--- a/views/showCourse.ejs
+++ b/views/showCourse.ejs
@@ -12,22 +12,31 @@
 <hr>
 <b>Problem Sets</b>
     <ul>
-    <% for(i = 0; i<= problemSets.length-1; i++){ %>
-
-        <%
-         if (!problemSets[i].visible && !(courseInfo.ownerId==user.id)) continue
-         else if (courseInfo.ownerId==user.id && !problemSets[i].visible) {
-             %> <li> HIDDEN
-         <% } else { %> <li>
-         <%}%>
+    <% for(i = 0; i<= problemSets.length-1; i++){  %>
+        <li>
 
-            <a href="/showProblemSet/<%= problemSets[i]._id %>">
-                <%= problemSets[i].name %>
+            <a href="/showProblemSet/<%= problemSets[i]._id %>"
+                <% if ( answerMap.get(problemSets[i]._id.toString()) >=
+                       problemMap.get(problemSets[i]._id.toString())
+                ) {%>
+                style="color:green"
+                <% } else {%>
+                style="color:red"
+                <% } %>
+            >
+
+                <%= problemSets[i].name.trim() || "problem set" %>
             </a>
-                <i><small><%= problemSets[i].createdAt %></small></i>
+
+                (<%= answerMap.get(problemSets[i]._id.toString()) || 0
+                  %>/<%=
+                     problemMap.get(problemSets[i]._id.toString()) || 0 %>)
+
+
         </li>
     <% } %>
     </ul>
+
 <hr>
     <% if (isTA || user._id.equals(courseInfo.ownerId)) { %>
         <a href="/addProblemSet/<%= courseInfo._id %>" class="btn btn-sm btn-danger">
@@ -37,58 +46,21 @@
         <a href="/showStudentInfo/<%= courseInfo._id %>" class="btn btn-sm btn-danger">
             Show Summarized Student Info
         </a>
-
-        <a href="/addSkill/<%= courseInfo._id %>" class="btn btn-sm btn-danger">
-            Add a Skill
-        </a>
-
-
-
-        <a href="/showTAs/<%= courseInfo._id %>" class="btn btn-sm btn-danger">
-            Show TAs
-        </a>
     <% } else { %>
 
     <%} %>
+    <br>
+    Number of reviews I've made: <%= myReviews.length %>
+    with <%= thumbsUp %> thumbs up and
+    <%= thumbsDown %> thumb downs <br>
+    <br><hr><br>
 
-    <a href="/showSkills/<%= courseInfo._id %>" class="btn btn-sm btn-danger">
-        Show Skills
+    <a href="/showTAs/<%= courseInfo._id %>" class="btn btn-sm btn-danger">
+        Show TAs
     </a>
-
     <a href="/" class="btn btn-sm btn-danger">
         Back to Home
     </a>
-    <hr>
-    <h2>Skills Mastered</h2>
-    <ul>
-    <% for(i = 0; i< skills.length; i++){  %>
-        <li>
-
-            <a href="/showSkill/<%= skills[i]._id %>">
-                <%= skills[i].name %>
-            </a>
-                <i><small><%= skills[i].createdAt %></small></i>
-        </li>
-    <% } %>
-    </ul>
-    <%
-    skillIds = skills.map((x)=>x.id)
-    %>
-    <h2>Skills being developed </h2>
-    <ul>
-    <% for(i = 0; i< allSkills.length; i++){
-
-         if (skillIds.includes(allSkills[i].id)) continue; %>
-        <li>
-
-            <a href="/showSkill/<%= allSkills[i]._id %>">
-                <%= allSkills[i].name %>
-            </a>
-                <i><small><%= allSkills[i].createdAt %></small></i>
-        </li>
-    <% } %>
-    </ul>
-
 
 
<%- include('bootfooter') -%>
</body>

</html>
diff --git a/views/showOneStudentInfo.ejs b/views/showOneStudentInfo.ejs
index 9cde173..1412f61 100644
--- a/views/showOneStudentInfo.ejs
+++ b/views/showOneStudentInfo.ejs
@@ -3,7 +3,7 @@
     <h1>Student Info for one student in <%= courseInfo.name %> </h1>
     <i>Beta Test ... </i>
         <%
-            let gradeSheet = courseInfo.gradeSheet
+            
             let grades = gradeSheet.grades[studentInfo._id]
             %>
     <h1><%= studentInfo.googlename %>/<%= studentInfo.googleemail %> </h1>
diff --git a/views/showProblem.ejs b/views/showProblem.ejs
index b694d25..7d19f05 100644
--- a/views/showProblem.ejs
+++ b/views/showProblem.ejs
@@ -2,11 +2,7 @@
<%- include('menubar') -%>
 
     <h3><%= problem.description %></h3>
-		<% if (course.ownerId ==user.id ) {%>
-		Visible: <%= problem.visible %><br>
-		Reviewable: <%= problem.reviewable %> <br>
-		<% } %>
-    <% if (course.ownerId.equals(user._id)) { %>
+    <% if (true || course.ownerId.equals(user._id)) { %>
         <div class="row">
             <div class="col-md">
                 Answers: <%= answerCount %>
@@ -24,70 +20,53 @@
                      Edit
                 </a>
             </div>
-
         </div>
     <% } %>
 
 
-<hr>
-    <div class="bg-default" style="border:thin solid black; white-space: pre-wrap; font-family:monospace; padding:10px"><%= problem.problemText %></div>
+    <div class="bg-default" style="border:thin solid black; white-space: pre-wrap; font-family:monospace; padding:10px"><% if (problem.allowAnswers) { %><%=
+			problem.problemText %><% } else {%>
+				This problem is not active at the moment.<% }
+%>	</div>
     <hr>
-    problem.reviewable: <%= problem.reviewable %><br>
 
-    <% if (answers.length > 0 && problem.reviewable) {
-			 // if the user has answered the question, or the user is the instructor
-		%>
+    <% if (answers.length > 0 ||(answers.length==0 && course.ownerId.equals(user._id))) { %>
         <% if (!course.ownerId.equals(user._id)) { %>
             <h2>Your Answer</h2>
             <small>Submission time and date:<%= problem.createdAt %> </small>
             <pre class="bg-success      "><%= answers[0].answer %></pre>
-            <br>
         <% } %>
         <a href="/reviewAnswers/<%= problem._id %>" class="btn btn-small btn-warning">Review others answers</a>
         <% if (!course.ownerId.equals(user._id)) {%>
             <a href="/showReviewsOfAnswer/<%= answers[0]._id %>" class="btn btn-small btn-info">Reviews of your answer</a>
         <% } %>
         <a href="/showReviewsByUser/<%= problem._id %>" class="btn btn-small btn-info">Your Reviews of other's answers</a>
-        <a href="/showProblemSet/<%= problem.psetId %>" class="btn btn-small btn-primary">Back to the Problem Set</a>
+				<a href="/showProblemSet/<%= problem.psetId %>" class="btn btn-small btn-primary">Back to the Problem Set</a>
         <% if (true || course.ownerId.equals(user._id)) { %>
-            <br>
             <a href="/showAllAnswers/<%= problem._id %>" class="btn btn-small btn-danger">Show all answers</a>
-        <%} %>
-
-    <% } else {
-			let theAnswer = (answers.length>0?answers[0]:{})
+				<%} %>
+				<% if (course.ownerId.equals(user._id)) {
+					    if (problem.allowAnswers) { %>
+						      <a href="/stopProblem/<%= problem._id %>" class="btn btn-small btn-secondary">Stop Problem</a>
+						<% } else { %>
+								  <a href="/startProblem/<%= problem._id %>" class="btn btn-small btn-secondary">Start Problem</a>
+					  <% } %>
+				<%} %>
 
-			%>
+    <% } else if (!problem.allowAnswers) { %>
+			<h4>This question has been closed. </h4>
+		<% } else { %>
             <form method="post" action="/saveAnswer/<%= problem._id %>">
                     <div class="form-group">
                         <label for="answer">Enter your answer below:</label>
                         <textarea class="form-control rounded-0" id="answer" name="answer" rows="10"
-				  style="border:thin solid black; white-space: pre-wrap; font-family:monospace; padding:10px"><%= theAnswer.answer %>  </textarea>
+				  style="border:thin solid black; white-space: pre-wrap; font-family:monospace; padding:10px"></textarea>
                     </div>
                     <br>
-							 <% if (problem.reviewable) {%>
-                    <input class="btn btn-lg btn-danger"
-													type="submit" value="submit">
-							 <% } else {%>
-								 		<input class="btn btn-lg btn-warning"
-													type="submit" value="save">
-							 <% } %>
-							 <% if (theAnswer.createdAt) {%>
-								 <br> Last save at <%= theAnswer.createdAt %>
-								 <a class="btn btn-primary" href="/showProblemSet/<%= problem.psetId %>">Return to Problem Set without saving</a>
-								 <% } %>
+                    <input class="btn btn-lg btn-warning" type="submit">
             </form>
     <% } %>
 
 
-		<hr>
-				<%= skills.length %> Skills:
-				<ul>
-						<% for(let i=0;i<skills.length;i++){%>
-							<li><%= skills[i].name %> </li>
-						<% } %>
-				</ul>
-
-
 
<%- include('bootfooter') -%>
</body>

</html>
diff --git a/views/showProblemSet.ejs b/views/showProblemSet.ejs
index 6d5cc50..c1b896d 100644
--- a/views/showProblemSet.ejs
+++ b/views/showProblemSet.ejs
@@ -1,35 +1,29 @@
<%- include('bootheader') -%>
<%- include('menubar') -%>
-    <h1><%= problemSet.name %></h1>
-
-
+    <h1><%= problemSet.name.trim() || "Problem Set" %></h1>
     <ul>
-    <% for(i = 0; i<= problems.length-1; i++){
-        if (!problems[i].visible && !(courseInfo.ownerId==user.id) ) {
-
-            %>
-          <li>skip <%= i %> </li>
-        <% } else %>
+    <% for(i = 0; i<= problems.length-1; i++){  %>
         <li>
-            <%= i %>
-            <a href="/showProblem/<%= problems[i]._id %>">
-                <%= problems[i].description %>
+            <a href="/showProblem/<%= problems[i]._id %>"
+                <% if (pids.includes(problems[i]._id.toString())) {%>
+                    style="color:green"
+                 <% } else { %>
+                    style="color:red"
+                 <% }%>
+                 >
+                <%= problems[i].description || "no name" %>
+
             </a>
         </li>
     <% } %>
     </ul>
     <hr>
     <% if (courseInfo.ownerId.equals(user._id)){ %>
-        <a class="btn btn-small btn-success" href="/addProblem/<%= psetId %>">Add Problem</a>
-        <a href="/editProblemSet/<%= psetId %>" class="btn btn-small btn-info">
-            Edit Problem Set</a>
+        <a class="btn btn-sm btn-success" href="/addProblem/<%= psetId %>">Add Problem</a>
     <% } %>
+    <a href="/showCourse/<%= problemSet.courseId %>" class="btn btn-sm btn-primary">Back to List of Problem Sets</a>
     <% if (user.taFor && (user.taFor).indexOf(problemSet.courseId)>=0) { %>
       <a class="btn btn-sm btn-warning" href="/gradeProblemSet/<%= problemSet._id %>">Grade Problem Set </a>
     <% } %>
-    <a href="/showCourse/<%= problemSet.courseId %>" class="btn btn-small btn-primary">Back to List of Problem Sets</a>
-
-
-
 
<%- include('bootfooter') -%>
</body>

</html>
diff --git a/views/showSkill.ejs b/views/showSkill.ejs
deleted file mode 100644
index b04caad..0000000
--- a/views/showSkill.ejs
+++ /dev/null
@@ -1,20 +0,0 @@
-<%- include('bootheader') -%>
-<%- include('menubar') -%>
-<br>
-<% if (isOwner) { %>
-<a href="/editSkill/<%= skill._id %>"
-    class="btn btn-sm btn-info">
-      Edit
- </a>
- <% } %>
-<h1>  Skill Name and Description </h1>
-<h3>Course: <%= courseInfo.name %> </h3>
-<h3>Name: <%= skill.name %></h3>
-<h3>Description:</h3>
-<%= skill.description %>
-<hr>
-<a class="btn btn-danger" href="/showCourse/<%= skill.courseId %>">back to course</a><br>
-<br>
-<a class="btn btn-primary" href="/showSkills/<%= skill.courseId %>">back to skills list</a><br>
-
-<%- include('bootfooter') -%>
</body>

</html>
diff --git a/views/showSkills.ejs b/views/showSkills.ejs
deleted file mode 100644
index 83e4f48..0000000
--- a/views/showSkills.ejs
+++ /dev/null
@@ -1,24 +0,0 @@
-<%- include('bootheader') -%>
-<%- include('menubar') -%>
-
-<hr>
-<b>Skills</b>
-    <ul>
-    <% for(i = 0; i<= skills.length-1; i++){  %>
-        <li>
-
-            <a href="/showSkill/<%= skills[i]._id %>">
-                <%= skills[i].name %>
-            </a>
-                <i><small><%= skills[i].createdAt %></small></i>
-        </li>
-    <% } %>
-    </ul>
-<hr>
-
-<a href="/showCourse/<%= courseId %>" class="btn btn-sm btn-danger">
-    Return Home
-</a>
-
-
-<%- include('bootfooter') -%>
</body>

</html>
diff --git a/views/showStudentInfo.ejs b/views/showStudentInfo.ejs
index 174e8bc..2fc5d4e 100644
--- a/views/showStudentInfo.ejs
+++ b/views/showStudentInfo.ejs
@@ -17,6 +17,9 @@
               <th class="js-sort-number"> Problems Completed</th>
               <th class="js-sort-number"> Number of Reviewed Answers</th>
               <th class="js-sort-number"> Number of Reviews </th>
+              <th class="js-sort-number"> Quality of their Reviews </th>
+              <th class="js-sort-number"> ThumbsUp </th>
+              <th class="js-sort-number"> ThumbsDown </th>
               <th class="js-sort-number"> Avg Review Score </th>
               <th> Scores per problem</th>
           </tr>
@@ -28,6 +31,8 @@
             let numReviews = 0
             let numReviewed = 0
             let numAnswers = 0
+            let thumbsUp=0
+            let thumbsDown=0
             for (a in grades.answers) {
                 numAnswers += 1
                 let answer = grades.answers[a].answer
@@ -40,6 +45,10 @@
                      numReviewed += 1
                      avgReviews.push(score)
                  }
+                 for (let r of reviews){
+                     thumbsUp += r.upvoters.length
+                     thumbsDown += r.downvoters.length
+                 }
                 numReviews = numReviews + reviews.length
               } %>
           <tr><td>
@@ -50,7 +59,10 @@
               <td><%= studentsInfo[i].googleemail %> </td>
               <td> <%= numAnswers %> </td>
               <td> <%= numReviewed %> </td>
-              <td> <%= numReviews %> </td>
+              <td> <%= numReviews %>  </td>
+              <td> <%= thumbsUp - thumbsDown %> </td>
+              <td> <%= thumbsUp  %> </td>
+              <td> <%= thumbsDown %> </td>
               <td><%= (avgReviews.reduceRight((x,y)=>(x+y),0)/numReviewed).toFixed(0) %>% </td>
               <td> <%= JSON.stringify(avgReviews) %> </td>
           </tr>
diff --git a/views/showStudentInfoCSV.ejs b/views/showStudentInfoCSV.ejs
new file mode 100644
index 0000000..5ec2c8f
--- /dev/null
+++ b/views/showStudentInfoCSV.ejs
@@ -0,0 +1,43 @@
+<%- include('bootheader') -%>
+<%- include('menubar') -%>
+<script type="text/javascript" src="/js/sort-table.js"></script>
+<style type="text/css">
+    th,td {border:1px solid black}
+</style>
+
+     Name,Email,Problems Completed, Number of Reviewed Answers, Number of Reviews, Quality of their Reviews ,ThumbsUp ,ThumbsDown ,Avg Review Score <br>
+        <% for(let i=0; i<studentsInfo.length; i++) {
+            let grades = gradeSheet.grades[studentsInfo[i]._id]
+            let avgReviews = []
+            let numReviews = 0
+            let numReviewed = 0
+            let numAnswers = 0
+            let thumbsUp=0
+            let thumbsDown=0
+            for (a in grades.answers) {
+                numAnswers += 1
+                let answer = grades.answers[a].answer
+                let reviews = grades.answers[a].reviews
+                let reviewScores = reviews.map((x)=>(x.points))
+                let problem = gradeSheet.problems[grades.answers[a].answer.problemId]
+                let score = (reviewScores.reduceRight((x,y)=>x+y,0)/(reviewScores.length * problem.points)*100)
+                score = parseInt((reviewScores.length==0)?0:score)
+                if (reviewScores.length>0) {
+                     numReviewed += 1
+                     avgReviews.push(score)
+                 }
+                 for (let r of reviews){
+                     thumbsUp += r.upvoters.length
+                     thumbsDown += r.downvoters.length
+                 }
+                numReviews = numReviews + reviews.length
+              } %>
+
+          <%= studentsInfo[i].googlename %>,<%= studentsInfo[i].googleemail %>,<%= numAnswers %>,<%= numReviewed %>,<%= numReviews %>,<%= thumbsUp - thumbsDown %>,<%= thumbsUp  %>,<%= thumbsDown %>,<%= (avgReviews.reduceRight((x,y)=>(x+y),0)/numReviewed).toFixed(0) || 0%>
+          <br>
+        <% } %>
+
+
+
+
+<%- include('bootfooter') -%>
</body>

</html>
diff --git a/views/stats.ejs b/views/stats.ejs
new file mode 100644
index 0000000..39fb644
--- /dev/null
+++ b/views/stats.ejs
@@ -0,0 +1,24 @@
+<%- include('bootheader') -%>
+<%- include('menubar') -%>
+    <div class="jumbotron">
+        <h1>Statistics</h1>
+    </div>
+    <ul>
+
+        <li> <%= userCount %> users registered </li>
+        <li> <%= problemCount %> problems created </li>
+        <li> <%= answerCount %> answers submitted </li>
+        <li> <%= reviewCount %> answers reviewed </li>
+        <li> <%= courseCount %> courses created
+            <%
+                if (googleemail=="tjhickey@brandeis.edu"){ %>
+                <ol>
+                    <% for(let i=0; i<courses.length; i++){ %>
+                        <li> <%= courses[i].name %>  </li>
+                    <% } %>
+
+                </ol>
+            <% } %>
+        </li>
+    </ul>
+<%- include('bootfooter') -%>
</body>

</html>
